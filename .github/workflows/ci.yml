name: "CI: system & integration tests"

on:
  # We run CI on pushes to the main branch
  push:
    branches:
      - main
      - dev
  # and on all pull requests to the main branch
  pull_request:
    branches:
      - main
      - dev
  # as well as upon manual triggers through the 'Actions' tab of the Github UI
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        #test all components with the oldest and newest supported version
        postgres_version: [ 14, 17 ] #14 is minimal required version
        redis_version: [ 6, 8 ]
        python_version: ["3.11", "3.13"]

    services:
      postgres:
        image: postgres:${{ matrix.postgres_version }}
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:${{ matrix.redis_version }}
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python_version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python_version }}

    - name: Install test requirements
      run: |
        python -m pip install -r tests/requirements.txt

    - name: Setup SSL certificates
      run: |
        mkdir -p ./backend-config/certs
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ./backend-config/certs/key.pem -out ./backend-config/certs/cert.pem -subj "/CN=localhost"

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login with ghcr.io
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Project-W docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        tags: project-w:latest

        #pull frontend from branch with the same name as backend is currently on:
        build-args: |
          PYTHON_VERSION: ${{ matrix.python_version }}
          FRONTEND_BRANCH_NAME=${{ github.ref_name }}
        push: false
        load: true
        cache-from: type=registry,ref=ghcr.io/julianfp/project-w:buildcache
        cache-to: type=registry,ref=ghcr.io/julianfp/project-w:buildcache,mode=max

    # TODO: Doesn't work like this because it runs out of disk space
    # TODO: Add caching for whisper models with cache action
    # - name: Build Project-W Runner docker image
    #  uses: docker/build-push-action@v6
    #  with:
    #    context: https://github.com/julianfp/project-w-runner.git#${{ github.ref_name }}
    #    tags: project-w_runner:latest
    #    build-args: |
    #      BUILDKIT_CONTEXT_KEEP_GIT_DIR=1
    #    push: false
    #    load: true
    #    cache-from: type=registry,ref=ghcr.io/julianfp/project-w_runner:buildcache
    #    cache-to: type=registry,ref=ghcr.io/julianfp/project-w_runner:buildcache,mode=max

    - name: Run test suite
      run: |
        python -m pytest tests/
